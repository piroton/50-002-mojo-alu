module manualtest (
    input clk,  // clock
    input rst,  // reset
    input next, // 1 when user is pressing the right button
    input previous, // 1 when user is pressing the left button
    input buttonA, // up button to store or show A
    input buttonB, // down button to store or show B
    input store_or_show, // choose between store and show modes
    input switchpart1[8], // middle row of LEDs
    input switchpart0[8], // rightmost row of LEDs
    output display[4][4], // display for 7-seg LEDs
    output opcode[6], // opcode
    output getA[16], // A
    output getB[16], // B
    output out[16] // ALU output
  ) {
  
  alu alu16; // instantiate alu
  
  storevalues storevalues(.clk(clk), .selA(buttonA), .selB(buttonB), .store_or_show(store_or_show), .switches1(switchpart1), .switches0(switchpart0)); // instantiate storevalues
  
  .clk(clk){
    fsm state(.rst(rst)) = {START, ADD, ADD_OVER, SUB, MUL, MOD, AND, OR, XOR, A, NOR, NAND, XNOR, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE};
  
    edge_detector detectmanualleft(#RISE(1), #FALL(0));
    edge_detector detectmanualright(#RISE(1), #FALL(0));
    // condition the buttons so that we have a steady signal
    button_conditioner buttonleft(.in(previous));
    button_conditioner buttonright(.in(next));
    }
  
  always {
    
    detectmanualleft.in = buttonleft.out;
    detectmanualright.in = buttonright.out;
    
    alu16.a = storevalues.outA;
    alu16.b = storevalues.outB;
    
    case(state.q){
      
      state.START:
        alu16.opcode=6b0;
        display = {4d0, 4d0, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.ADD;
          }else if (detectmanualleft.out == 1){
            state.d = state.CMPLE;
            }
        }            
        
      // adder circuit
      // ADD test case: 0100
      state.ADD:
        alu16.opcode=6b000000;
        display = {4d0, 4d1, 4d0, 4d0};
          if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.ADD_OVER;
            }
          else if (detectmanualleft.out == 1){
            state.d = state.START;
            }
        }
      
      // ADD_OVER test case: 0200
      state.ADD_OVER:
        alu16.opcode=6b000000;
        display = {4d0, 4d2, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.SUB;
                }else if (detectmanualleft.out == 1){
            state.d = state.ADD;
            }
        }
        
      // SUB test case: 0300
      state.SUB:
        alu16.opcode = 6b000001;
        display = {4d0, 4d3, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.MUL;
                      } else if (detectmanualleft.out == 1){
            state.d = state.ADD_OVER;
            }
        }
      
      // MUL test case: 0400
      state.MUL:
        alu16.opcode = 6b000010;
        display = {4d0, 4d4, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.MOD;
            } else if (detectmanualleft.out == 1){
            state.d = state.SUB;
            }
        }
      
      // MOD test case: 0500
      state.MOD:
        alu16.opcode = 6b000011;
        display = {4d0, 4d5, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.AND;
              } else if (detectmanualleft.out == 1){
            state.d = state.MUL;
            }
        }
        
      // boolean circuit
      // AND test case: 0600
      state.AND:
        alu16.opcode = 6b011000;
        display = {4d0, 4d6, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.OR;}
              else if (detectmanualleft.out == 1){
            state.d = state.MOD;
            }
        }
      
      // OR test case: 0700
      state.OR:
        alu16.opcode = 6b011110;
        display = {4d0, 4d7, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.XOR;}
              else if (detectmanualleft.out == 1){
            state.d = state.AND;
            }
        }
      
      // XOR test case: 0800
      state.XOR:
        alu16.opcode = 6b010110;
        display = {4d0, 4d8, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.A;}
              else if (detectmanualleft.out == 1){
            state.d = state.OR;
            }
        }
      
      // A test case: 0900
      state.A:
        alu16.opcode = 6b011010;
        display = {4d0, 4d9, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.NOR;}
                else if (detectmanualleft.out == 1){
            state.d = state.XOR;
            }
        }
      
      // NOR test case: 1000
      state.NOR:
        alu16.opcode = 6b011111;
        display = {4d1, 4d0, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.NAND;}
              else if (detectmanualleft.out == 1){
            state.d = state.A;
            }
        }
        
      // NAND test case: 1100
      state.NAND:
        alu16.opcode = 6b011001;
        display = {4d1, 4d1, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.XNOR;}
                else if (detectmanualleft.out == 1){
            state.d = state.NOR;
            }
        }
      
      // XNOR test case: 1200
      state.XNOR:
        alu16.opcode = 6b010111;
        display = {4d1, 4d2, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.SHL;}
                else if (detectmanualleft.out == 1){
            state.d = state.NAND;
            }
        }
        
      // bitwise operator circuit
      // SHL test case: 1300
      state.SHL:
        alu16.opcode = 6b100000;
        display = {4d1, 4d3, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.SHR;}
                else if (detectmanualleft.out == 1){
            state.d = state.XNOR;
            }
        }
        
      // SHR test case: 1400
      state.SHR:
        alu16.opcode = 6b100001;
        display = {4d1, 4d4, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.SRA;}
              else if (detectmanualleft.out == 1){
            state.d = state.SHL;
            }
        }
      
      // SRA test case: 1500
      state.SRA:
        alu16.opcode = 6b100011;
        display = {4d1, 4d5, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.CMPEQ;}
              else if (detectmanualleft.out == 1){
            state.d = state.SHR;
            }
        }
      
      // comparator circuit
      // CMPEQ test case: 1600
      state.CMPEQ:
        alu16.opcode = 6b110011;
        display = {4d1, 4d6, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.CMPLT;}
                else if (detectmanualleft.out == 1){
            state.d = state.SRA;
            }
        }
      
      // CMPLT test case: 1700
      state.CMPLT:
        alu16.opcode = 6b110101;
        display = {4d1, 4d7, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.CMPLE;}
                else if (detectmanualleft.out == 1){
            state.d = state.CMPEQ;
            }
        }
      
      // CMPLE test case: 1800
      state.CMPLE:
        alu16.opcode = 6b110101;
        display = {4d1, 4d8, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.START;}
                else if (detectmanualleft.out == 1){
            state.d = state.CMPLT;
            }
        }
        
      default:
        alu16.opcode = 0;
        alu16.a = 16b0;
        alu16.b = 16b0;
        display = {4d0, 4d0, 4d0, 4d0};
        if (!(detectmanualright.out == 1 & detectmanualleft.out == 1)){
          if (detectmanualright.out == 1){
            state.d = state.ADD;}
              else if (detectmanualleft.out == 1){
            state.d = state.CMPLE;
            }
        }
  }
    
  opcode = alu16.getOpcode;
  getA = alu16.getA;
  getB = alu16.getB;
  out = alu16.out;
}
}