/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manualtest_9 (
    input clk,
    input rst,
    input next,
    input previous,
    input buttonA,
    input buttonB,
    input store_or_show,
    input [7:0] switchpart1,
    input [7:0] switchpart0,
    output reg [15:0] display,
    output reg [5:0] opcode,
    output reg [15:0] getA,
    output reg [15:0] getB,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  wire [1-1:0] M_alu16_overflow;
  wire [16-1:0] M_alu16_getA;
  wire [16-1:0] M_alu16_getB;
  wire [6-1:0] M_alu16_getOpcode;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  reg [6-1:0] M_alu16_opcode;
  alu_17 alu16 (
    .a(M_alu16_a),
    .b(M_alu16_b),
    .opcode(M_alu16_opcode),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n),
    .overflow(M_alu16_overflow),
    .getA(M_alu16_getA),
    .getB(M_alu16_getB),
    .getOpcode(M_alu16_getOpcode)
  );
  
  wire [16-1:0] M_storevalues_outA;
  wire [16-1:0] M_storevalues_outB;
  storevalues_18 storevalues (
    .clk(clk),
    .selA(buttonA),
    .selB(buttonB),
    .store_or_show(store_or_show),
    .switches1(switchpart1),
    .switches0(switchpart0),
    .outA(M_storevalues_outA),
    .outB(M_storevalues_outB)
  );
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADD_OVER_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam MUL_state = 5'd4;
  localparam MOD_state = 5'd5;
  localparam AND_state = 5'd6;
  localparam OR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam A_state = 5'd9;
  localparam NOR_state = 5'd10;
  localparam NAND_state = 5'd11;
  localparam XNOR_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHR_state = 5'd14;
  localparam SRA_state = 5'd15;
  localparam CMPEQ_state = 5'd16;
  localparam CMPLT_state = 5'd17;
  localparam CMPLE_state = 5'd18;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  wire [1-1:0] M_detectmanualleft_out;
  reg [1-1:0] M_detectmanualleft_in;
  edge_detector_2 detectmanualleft (
    .clk(clk),
    .in(M_detectmanualleft_in),
    .out(M_detectmanualleft_out)
  );
  wire [1-1:0] M_detectmanualright_out;
  reg [1-1:0] M_detectmanualright_in;
  edge_detector_2 detectmanualright (
    .clk(clk),
    .in(M_detectmanualright_in),
    .out(M_detectmanualright_out)
  );
  wire [1-1:0] M_buttonleft_out;
  button_conditioner_5 buttonleft (
    .clk(clk),
    .in(previous),
    .out(M_buttonleft_out)
  );
  wire [1-1:0] M_buttonright_out;
  button_conditioner_5 buttonright (
    .clk(clk),
    .in(next),
    .out(M_buttonright_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_detectmanualleft_in = M_buttonleft_out;
    M_detectmanualright_in = M_buttonright_out;
    M_alu16_a = M_storevalues_outA;
    M_alu16_b = M_storevalues_outB;
    
    case (M_state_q)
      START_state: begin
        M_alu16_opcode = 6'h00;
        display = 16'h0000;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = ADD_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = CMPLE_state;
            end
          end
        end
      end
      ADD_state: begin
        M_alu16_opcode = 6'h00;
        display = 16'h0100;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = ADD_OVER_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = START_state;
            end
          end
        end
      end
      ADD_OVER_state: begin
        M_alu16_opcode = 6'h00;
        display = 16'h0200;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = SUB_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = ADD_state;
            end
          end
        end
      end
      SUB_state: begin
        M_alu16_opcode = 6'h01;
        display = 16'h0300;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = MUL_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = ADD_OVER_state;
            end
          end
        end
      end
      MUL_state: begin
        M_alu16_opcode = 6'h02;
        display = 16'h0400;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = MOD_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = SUB_state;
            end
          end
        end
      end
      MOD_state: begin
        M_alu16_opcode = 6'h03;
        display = 16'h0500;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = AND_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = MUL_state;
            end
          end
        end
      end
      AND_state: begin
        M_alu16_opcode = 6'h18;
        display = 16'h0600;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = OR_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = MOD_state;
            end
          end
        end
      end
      OR_state: begin
        M_alu16_opcode = 6'h1e;
        display = 16'h0700;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = XOR_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = AND_state;
            end
          end
        end
      end
      XOR_state: begin
        M_alu16_opcode = 6'h16;
        display = 16'h0800;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = A_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = OR_state;
            end
          end
        end
      end
      A_state: begin
        M_alu16_opcode = 6'h1a;
        display = 16'h0900;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = NOR_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = XOR_state;
            end
          end
        end
      end
      NOR_state: begin
        M_alu16_opcode = 6'h1f;
        display = 16'h1000;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = NAND_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = A_state;
            end
          end
        end
      end
      NAND_state: begin
        M_alu16_opcode = 6'h19;
        display = 16'h1100;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = XNOR_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = NOR_state;
            end
          end
        end
      end
      XNOR_state: begin
        M_alu16_opcode = 6'h17;
        display = 16'h1200;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = SHL_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = NAND_state;
            end
          end
        end
      end
      SHL_state: begin
        M_alu16_opcode = 6'h20;
        display = 16'h1300;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = SHR_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = XNOR_state;
            end
          end
        end
      end
      SHR_state: begin
        M_alu16_opcode = 6'h21;
        display = 16'h1400;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = SRA_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = SHL_state;
            end
          end
        end
      end
      SRA_state: begin
        M_alu16_opcode = 6'h23;
        display = 16'h1500;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = CMPEQ_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = SHR_state;
            end
          end
        end
      end
      CMPEQ_state: begin
        M_alu16_opcode = 6'h33;
        display = 16'h1600;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = CMPLT_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = SRA_state;
            end
          end
        end
      end
      CMPLT_state: begin
        M_alu16_opcode = 6'h35;
        display = 16'h1700;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = CMPLE_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = CMPEQ_state;
            end
          end
        end
      end
      CMPLE_state: begin
        M_alu16_opcode = 6'h35;
        display = 16'h1800;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = START_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = CMPLT_state;
            end
          end
        end
      end
      default: begin
        M_alu16_opcode = 1'h0;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        display = 16'h0000;
        if (!(M_detectmanualright_out == 1'h1 & M_detectmanualleft_out == 1'h1)) begin
          if (M_detectmanualright_out == 1'h1) begin
            M_state_d = ADD_state;
          end else begin
            if (M_detectmanualleft_out == 1'h1) begin
              M_state_d = CMPLE_state;
            end
          end
        end
      end
    endcase
    opcode = M_alu16_getOpcode;
    getA = M_alu16_getA;
    getB = M_alu16_getB;
    out = M_alu16_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
