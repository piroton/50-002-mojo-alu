/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module autotest_10 (
    input clk,
    input rst,
    input pause,
    input begintest,
    output reg [15:0] display,
    output reg [5:0] opcode,
    output reg [15:0] getA,
    output reg [15:0] getB,
    output reg [15:0] out
  );
  
  
  
  localparam CLKSPEED = 5'h19;
  
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  wire [1-1:0] M_alu16_overflow;
  wire [16-1:0] M_alu16_getA;
  wire [16-1:0] M_alu16_getB;
  wire [6-1:0] M_alu16_getOpcode;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  reg [6-1:0] M_alu16_opcode;
  alu_17 alu16 (
    .a(M_alu16_a),
    .b(M_alu16_b),
    .opcode(M_alu16_opcode),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n),
    .overflow(M_alu16_overflow),
    .getA(M_alu16_getA),
    .getB(M_alu16_getB),
    .getOpcode(M_alu16_getOpcode)
  );
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADD_OVER_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam MUL_state = 5'd4;
  localparam MOD_state = 5'd5;
  localparam AND_state = 5'd6;
  localparam OR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam A_state = 5'd9;
  localparam NOR_state = 5'd10;
  localparam NAND_state = 5'd11;
  localparam XNOR_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHR_state = 5'd14;
  localparam SRA_state = 5'd15;
  localparam CMPEQ_state = 5'd16;
  localparam CMPLT_state = 5'd17;
  localparam CMPLE_state = 5'd18;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  reg [15:0] cmpleout1;
  
  reg [15:0] cmpleout2;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_state_q)
      START_state: begin
        M_alu16_opcode = 6'h00;
        display = 16'h0084;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        if (begintest == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu16_opcode = 6'h00;
        M_alu16_a = 16'h0003;
        M_alu16_b = 16'h0002;
        if (M_alu16_out == 16'h0005) begin
          display = 16'h0188;
        end else begin
          display = 16'h0144;
        end
        if (pause == 1'h0) begin
          M_state_d = ADD_OVER_state;
        end
      end
      ADD_OVER_state: begin
        M_alu16_opcode = 6'h00;
        M_alu16_a = 16'h4000;
        M_alu16_b = 16'h4000;
        if (M_alu16_overflow == 1'h1) begin
          display = 16'h0288;
        end else begin
          display = 16'h0244;
        end
        if (pause == 1'h0) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu16_opcode = 6'h01;
        M_alu16_a = 16'h0006;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'h0003) begin
          display = 16'h0388;
        end else begin
          display = 16'h0344;
        end
        if (pause == 1'h0) begin
          M_state_d = MUL_state;
        end
      end
      MUL_state: begin
        M_alu16_opcode = 6'h02;
        M_alu16_a = 16'h0002;
        M_alu16_b = 16'h0004;
        if (M_alu16_out == 16'h0008) begin
          display = 16'h0488;
        end else begin
          display = 16'h0444;
        end
        if (pause == 1'h0) begin
          M_state_d = MOD_state;
        end
      end
      MOD_state: begin
        M_alu16_opcode = 6'h03;
        M_alu16_a = 16'h0007;
        M_alu16_b = 16'h0002;
        if (M_alu16_out == 16'h0001) begin
          display = 16'h0588;
        end else begin
          display = 16'h0544;
        end
        if (pause == 1'h0) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu16_opcode = 6'h18;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'h0001) begin
          display = 16'h0688;
        end else begin
          display = 16'h0644;
        end
        if (pause == 1'h0) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu16_opcode = 6'h1e;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'h0007) begin
          display = 16'h0788;
        end else begin
          display = 16'h0744;
        end
        if (pause == 1'h0) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu16_opcode = 6'h16;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'h0006) begin
          display = 16'h0888;
        end else begin
          display = 16'h0844;
        end
        if (pause == 1'h0) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu16_opcode = 6'h1a;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'h0005) begin
          display = 16'h0988;
        end else begin
          display = 16'h0944;
        end
        if (pause == 1'h0) begin
          M_state_d = NOR_state;
        end
      end
      NOR_state: begin
        M_alu16_opcode = 6'h1f;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'hfff8) begin
          display = 16'h1088;
        end else begin
          display = 16'h1044;
        end
        if (pause == 1'h0) begin
          M_state_d = NAND_state;
        end
      end
      NAND_state: begin
        M_alu16_opcode = 6'h19;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'hfffe) begin
          display = 16'h1188;
        end else begin
          display = 16'h1144;
        end
        if (pause == 1'h0) begin
          M_state_d = XNOR_state;
        end
      end
      XNOR_state: begin
        M_alu16_opcode = 6'h17;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0003;
        if (M_alu16_out == 16'hfff9) begin
          display = 16'h1288;
        end else begin
          display = 16'h1244;
        end
        if (pause == 1'h0) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu16_opcode = 6'h20;
        M_alu16_a = 16'h000a;
        M_alu16_b = 16'h0007;
        if (M_alu16_out == 16'h0500) begin
          display = 16'h1388;
        end else begin
          display = 16'h1344;
        end
        if (pause == 1'h0) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu16_opcode = 6'h21;
        M_alu16_a = 16'h0500;
        M_alu16_b = 16'h0007;
        if (M_alu16_out == 16'h000a) begin
          display = 16'h1488;
        end else begin
          display = 16'h1444;
        end
        if (pause == 1'h0) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu16_opcode = 6'h23;
        M_alu16_a = 16'h0500;
        M_alu16_b = 16'h0007;
        if (M_alu16_out == 16'h000a) begin
          display = 16'h1588;
        end else begin
          display = 16'h1544;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu16_opcode = 6'h33;
        M_alu16_a = 16'h0007;
        M_alu16_b = 16'h0007;
        if (M_alu16_out == 16'h0001) begin
          display = 16'h1688;
        end else begin
          display = 16'h1644;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu16_opcode = 6'h35;
        M_alu16_a = 16'h0004;
        M_alu16_b = 16'h0005;
        if (M_alu16_out == 16'h0001) begin
          display = 16'h1788;
        end else begin
          display = 16'h1744;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu16_opcode = 6'h35;
        M_alu16_a = 16'h0007;
        M_alu16_b = 16'h0007;
        cmpleout1 = M_alu16_out;
        M_alu16_opcode = 6'h35;
        M_alu16_a = 16'h0005;
        M_alu16_b = 16'h0007;
        cmpleout2 = M_alu16_out;
        if (cmpleout1 == 16'h0001 & cmpleout2 == 16'h0001) begin
          display = 16'h1888;
        end else begin
          display = 16'h1844;
        end
        if (pause == 1'h0) begin
          M_state_d = START_state;
        end
      end
      default: begin
        M_alu16_opcode = 6'h00;
        M_alu16_a = 16'h0000;
        M_alu16_b = 16'h0000;
        display = 16'h0084;
        if (begintest == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
    endcase
    opcode = M_alu16_getOpcode;
    getA = M_alu16_getA;
    getB = M_alu16_getB;
    out = M_alu16_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge M_counter_q[24+0-:1]) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
